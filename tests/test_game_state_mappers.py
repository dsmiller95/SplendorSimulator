
from game_model.AI_model.gamestate_input import GamestateInputVector

def test_game_state_input_correct_length_flat_map():
    empty_input = GamestateInputVector()
    flat_map = empty_input.flat_map()
    assert len(flat_map.keys()) == 108
    expected_keys = [
        "player_0_temp_resources",
        "player_0_perm_resources",
        "player_0_points",
        "player_0_ordering",
        "player_0_reserved_card_0_costs",
        "player_0_reserved_card_0_returns",
        "player_0_reserved_card_0_points",
        "player_0_reserved_card_1_costs",
        "player_0_reserved_card_1_returns",
        "player_0_reserved_card_1_points",
        "player_0_reserved_card_2_costs",
        "player_0_reserved_card_2_returns",
        "player_0_reserved_card_2_points",
        "player_1_temp_resources",
        "player_1_perm_resources",
        "player_1_points",
        "player_1_ordering",
        "player_1_reserved_card_0_costs",
        "player_1_reserved_card_0_returns",
        "player_1_reserved_card_0_points",
        "player_1_reserved_card_1_costs",
        "player_1_reserved_card_1_returns",
        "player_1_reserved_card_1_points",
        "player_1_reserved_card_2_costs",
        "player_1_reserved_card_2_returns",
        "player_1_reserved_card_2_points",
        "player_2_temp_resources",
        "player_2_perm_resources",
        "player_2_points",
        "player_2_ordering",
        "player_2_reserved_card_0_costs",
        "player_2_reserved_card_0_returns",
        "player_2_reserved_card_0_points",
        "player_2_reserved_card_1_costs",
        "player_2_reserved_card_1_returns",
        "player_2_reserved_card_1_points",
        "player_2_reserved_card_2_costs",
        "player_2_reserved_card_2_returns",
        "player_2_reserved_card_2_points",
        "player_3_temp_resources",
        "player_3_perm_resources",
        "player_3_points",
        "player_3_ordering",
        "player_3_reserved_card_0_costs",
        "player_3_reserved_card_0_returns",
        "player_3_reserved_card_0_points",
        "player_3_reserved_card_1_costs",
        "player_3_reserved_card_1_returns",
        "player_3_reserved_card_1_points",
        "player_3_reserved_card_2_costs",
        "player_3_reserved_card_2_returns",
        "player_3_reserved_card_2_points",
        "board_noble_0_costs",
        "board_noble_0_points",
        "board_noble_1_costs",
        "board_noble_1_points",
        "board_noble_2_costs",
        "board_noble_2_points",
        "board_noble_3_costs",
        "board_noble_3_points",
        "board_noble_4_costs",
        "board_noble_4_points",
        "tier_0_open_card_0_costs",
        "tier_0_open_card_0_returns",
        "tier_0_open_card_0_points",
        "tier_0_open_card_1_costs",
        "tier_0_open_card_1_returns",
        "tier_0_open_card_1_points",
        "tier_0_open_card_2_costs",
        "tier_0_open_card_2_returns",
        "tier_0_open_card_2_points",
        "tier_0_open_card_3_costs",
        "tier_0_open_card_3_returns",
        "tier_0_open_card_3_points",
        "tier_0_hidden_card_costs",
        "tier_0_hidden_card_returns",
        "tier_0_hidden_card_points",
        "tier_1_open_card_0_costs",
        "tier_1_open_card_0_returns",
        "tier_1_open_card_0_points",
        "tier_1_open_card_1_costs",
        "tier_1_open_card_1_returns",
        "tier_1_open_card_1_points",
        "tier_1_open_card_2_costs",
        "tier_1_open_card_2_returns",
        "tier_1_open_card_2_points",
        "tier_1_open_card_3_costs",
        "tier_1_open_card_3_returns",
        "tier_1_open_card_3_points",
        "tier_1_hidden_card_costs",
        "tier_1_hidden_card_returns",
        "tier_1_hidden_card_points",
        "tier_2_open_card_0_costs",
        "tier_2_open_card_0_returns",
        "tier_2_open_card_0_points",
        "tier_2_open_card_1_costs",
        "tier_2_open_card_1_returns",
        "tier_2_open_card_1_points",
        "tier_2_open_card_2_costs",
        "tier_2_open_card_2_returns",
        "tier_2_open_card_2_points",
        "tier_2_open_card_3_costs",
        "tier_2_open_card_3_returns",
        "tier_2_open_card_3_points",
        "tier_2_hidden_card_costs",
        "tier_2_hidden_card_returns",
        "tier_2_hidden_card_points",
        "resources"
    ]

    for expected in expected_keys:
        assert expected in flat_map
    for actual in flat_map:
        assert actual in expected_keys
        
def test_game_state_input_correct_length_raw_data():
    empty_input = GamestateInputVector()
    flat_map = empty_input.flat_map()
    assert len(flat_map.aggregate_list) == 385